---
##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
    test:
    # Refine the classifications above by excluding files in test/util/.
        - exclude: tests/
  # The default behavior is to tag all files created during the
  # build as `generated`. Results are hidden for generated code. You can tag
  # further files as being generated by adding them to the `generated` section.
    generated:
    # Exclude all `*.c` files under the `ui/` directory from classification as
    # generated code.
        - exclude: YCSB-CXX/*
    # By default, all files not checked into the repository are considered to be
    # 'generated'.
  # The default behavior is to tag library code as `library`. Results are hidden
  # for library code. You can tag further files as being library code by adding them
  # to the `library` section.
    library:
    # - exclude: path/to/libary/code/**/*.c
  # The default behavior is to tag template files as `template`. Results are hidden
  # for template files. You can tag further files as being template files by adding
  # them to the `template` section.
    template:
    # - exclude: path/to/template/code/**/*.c
  # Define your own category, for example: 'some_custom_category'.
    some_custom_category:
    # Classify all files in the top-level directory tools/ (or the top-level file
    # called tools).
        - scripts

#########################################################################################
# Use the `queries` block to change the default display of query results.               #
#########################################################################################

queries:
  # Start by hiding the results of all queries.
  # - exclude: "*"
  # Then include all queries tagged 'security' and 'correctness', and with a severity of
  # 'error'.
    - include:
          tags:
              - security
              - correctness
          severity: error
  # Specifically hide the results of two queries.
    - exclude: cpp/use-of-goto
  # - exclude: java/equals-on-unrelated-types
  # refine by including the `java/command-line-injection` query.
  # - include: java/command-line-injection

#########################################################################################
# Define changes to the default code extraction process.                                #
# Each block configures the extraction of a single language, and modifies actions in a  #
# named step. Every named step includes automatic default actions,                      #
# except for the 'prepare' step. The steps are performed in the following sequence:     #
# prepare                                                                               #
# after_prepare                                                                         #
# configure (C/C++ only)                                                                #
# python_setup (Python only)                                                            #
# before_index                                                                          #
# index                                                                                 #
##########################################################################################

#########################################################################################
# Environment variables available to the steps:                                         #
#########################################################################################

# LGTM_SRC
#   The root of the source tree.
# LGTM_WORKSPACE
#   An existing (initially empty) folder outside the source tree.
#   Used for temporary download and setup commands.

#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

extraction:
  # Define settings for C/C++ analysis
  #####################################
    cpp:
    # The `prepare` step exists for customization on LGTM.com only.
        prepare:
    #   # The `packages` section is valid for LGTM.com only. It names Ubuntu packages to
    #   # be installed.
            packages:
                - cmake
                - libnuma-dev
                - gcc-11
                - g++-11
    # Add an `after-prepare` step if you need to run commands after the prepare step.
    # Each command should be listed on a separate line.
    # This step is useful for C/C++ analysis where you want to prepare the environment
    # for the `configure` step without changing the default behavior for that step.
        after_prepare:
            - export GNU_MAKE=make
            - export GIT=true
            - cmake --version
            - wget -O cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.21.5/cmake-3.21.5.tar.gz
            - tar zxf cmake.tar.gz
            - cd cmake-*/
            - mkdir build
            - cd build
            - cmake -DCMAKE_INSTALL_PREFIX:PATH=~/.local/ -DCMAKE_BUILD_TYPE=Release ..
            - make install
            - ls ~/.local/bin
            - export PATH=~/.local/bin:$PATH # env variables are propagated, so this is visible in the configure step!
            - cmake --version
    # The `configure` step generates build configuration files which the `index` step
    # then uses to build the codebase.
        configure:
            command:
                - mkdir build
                - cd build
                - CC=gcc-11 CXX=g++-11 cmake ..
    # Optional step. You should add a `before_index` step if you need to run commands
    # before the `index` step.
    # before_index:
    #   - export BOOST_DIR=$LGTM_SRC/boost
    #   - export GTEST_DIR=$LGTM_SRC/googletest
    #   - export HUNSPELL_DIR=$LGTM_SRC/hunspell
    #   - export CRYPTOPP_DIR=$LGTM_SRC/cryptopp
    # The `index` step builds the code and extracts information during the build
    # process.
        index:
      # Override the autobuild process by specifying a list of custom build commands
      # to use instead.
            build_command:
                - cd build
                - make -j 2
