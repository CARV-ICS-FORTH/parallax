#include "testhdr.h"

#test mttest_9
	  /* PROBLHMATIKO (segmentation meta apo kapoia inserts/deletes, alla oxi panta) */

	  const int CUT = 1;
	  
	  fputs("Multi-thread test 9: Insertions and deletes in a single database at the same time.\n", stderr);
	  
	  prepareVolume();
	  
	  db_handle *db = newDb("dat0.dat", PATHNAME, (SIZE/CUT));
	  
	  pthread_t t1, t2, t3, t4;
	  struct dbcont cont1, cont2;
	  
	  srand(time(NULL));
	  
	  int i;
	  
	  fputs("Generating keys and values...\n", stderr);
	  
	  for (i = 0; i < INS_NUM; i++) {
		cont1.key[i][0] = sizeof(int);
		cont1.key[i][1] = (rand() % 4294967296);
		
		cont1.value[i][0] = sizeof(int);
		cont1.value[i][1] = (rand() % 4294967296);
		
		cont2.key[i][0] = sizeof(int);
		cont2.key[i][1] = (rand() % 4294967296);
		
		cont2.value[i][0] = sizeof(int);
		cont2.value[i][1] = (rand() % 4294967296);
	  }
	  
	  cont1.db = db;
	  cont2.db = db;
	  
	  cont2.no = 2;
	  cont1.no = 1;
	  
	  fputs("Inserting and deleting keys and values...\n", stderr);
	  
	  fail_unless(pthread_create(&t1, NULL, insertKeysValues, &cont1) == 0, "Thread 1 Error");
	  fail_unless(pthread_create(&t2, NULL, insertKeysValues, &cont2) == 0, "Thread 2 Error");
	  fail_unless(pthread_create(&t3, NULL, deleteKeys, &cont1) == 0, "Thread 3 Error");
	  fail_unless(pthread_create(&t4, NULL, deleteKeys, &cont2) == 0, "Thread 4 Error");
	  
	  fail_unless(pthread_join(t1, NULL) == 0, "Cannot join thread 1");
	  fail_unless(pthread_join(t2, NULL) == 0, "Cannot join thread 2");
	  fail_unless(pthread_join(t3, NULL) == 0, "Cannot join thread 3");
	  fail_unless(pthread_join(t4, NULL) == 0, "Cannot join thread 4");
	  
	  fputs("Multi-thread test 9 done.\n", stderr);
