#include "testhdr.h"

#test simtest_1
	fputs("Simple test 1: Pre-defined key-value insertion and search.\n", stderr);
	
	int key = 343;
	const int32_t key_len = sizeof(int);
	int val = 978543;
	const int32_t val_len = sizeof(int);
	int INS= 10;

	int32_t data[10][2];

	srand(time(NULL));

	prepareVolume();

	db_handle *db = newDb(DBNAME, PATHNAME, SIZE);

	puts("\n\n");

	char *tmp = (char *)malloc(sizeof(int32_t) + sizeof(int) + sizeof(int32_t) + sizeof(int));
	char *g_key = (char *) malloc(sizeof(int32_t) + sizeof(int));
	char *ret;
	/*uint64_t pass = 0;
	uint64_t fail = 0;*/

	int predefined[10] = {4, 5, 2124, 4360923, 3.1415914234, 12975, 0, -128, 10000000000, -9999999999};
	int a;

	for(int i = 0; i < INS; i++){
		/*do{
			key = rand() % 8192;
		}while(data[key][0] == key); */
	//	key = i;
		key = i;
		data[key][0] = key;
		val = data[key][1] = predefined[i];

		memcpy(tmp,                                                   &key_len, sizeof(int32_t));
		memcpy(tmp + sizeof(int32_t),                                 &key,     sizeof(int));
		memcpy(tmp + sizeof(int32_t) + sizeof(int),                   &val_len, sizeof(int32_t));
		memcpy(tmp + sizeof(int32_t) + sizeof(int) + sizeof(int32_t), &val,     sizeof(int));

		printf("insert %d, %d\n", key, val);
		insertKeyValue(db, tmp, tmp + sizeof(int32_t) + sizeof(int), 0);

		memcpy(g_key, &key_len, sizeof(int32_t));
		memcpy(g_key + sizeof(int32_t), &key, sizeof(int));

		ret = (char *) findKey(db, g_key);
		
		/*if(ret == NULL){
//			std::cout << "... returns NULL" << std::endl;
			fail++;
		}else{
			if(val == *(int *)(ret + sizeof(int32_t))){
	//			std::cout << "... returns " << *(int *)(ret + sizeof(int32_t)) << " [PASS]"<< std::endl;
				pass++;
			}else{
	//			std::cout << "... returns " << *(int *)(ret + sizeof(int32_t)) << " [FAIL]"<< std::endl;
				fail++;
			}
		} */

		fail_unless(ret != NULL, "Search function bugged.");
		fail_unless(val == *(int *)(ret + sizeof(int32_t)), "Search function bugged.");

		fail_unless(deleteKey(db, g_key) == 10, "Delete function bugged.");
	}

	free(tmp);

	// snapshot
	snapshot(db->volume_desc);
	
	puts("\n\n");
	
	/*fprintf(stderr, "%sPASS = %llu%s\n", TEXT_GREEN, pass, TEXT_NORMAL);
	fprintf(stderr, "%sFAIL = %llu%s\n", TEXT_RED, fail, TEXT_NORMAL); */
	
	puts("Tests done.");