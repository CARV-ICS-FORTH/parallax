#include "testhdr.h"

#test simtest_8
	fputs("Simple test 8: Insertion of random keys-values and attempting deletion of another set of random keys-values.\n", stderr);

	unsigned int key[2];
	key[0] = sizeof(unsigned int);
	key[1] = 1025;
	const int32_t key_len = sizeof(int);
	unsigned int val[2];
	val[0] = sizeof(unsigned int);
	val[1] = 9000;
	const int32_t val_len = sizeof(int);
	unsigned int a[2], b[2];
	a[0] = sizeof(unsigned int);
	b[0] = sizeof(unsigned int);

	prepareVolume();
	
	db_handle *db = newDb(DBNAME, PATHNAME, SIZE);
	
	puts("\n\n");

	srand(time(NULL));

	while (key[1] > 0) {
		key[1] = (rand() % 2048);
		val[1] = (rand() % 8192);

		a[1] = key[1];
		b[1] = val[1];
		
		if ((key[1] > 0)) {
			insertKeyValue(db, a, b, 0);
			fprintf(stderr, "insert %d w/ key %d\n", b[1], a[1]);
		}

		/* Parathrhseis:
		 * Den mporei na balei kapou opou yparxei hdh kapoio key (doubtful). 1) 
		 * Fainetai oti den mporei na balei proshmasmena keys/values (crash) 2) 
		 * Oi findKey kai deleteKey crasharoun an paroun NULL key 3) 
		 * H insertKeyValue crasharei epishs an parei NULL key/value 4) 
		 * Fainetai oti h insertKeyValue den mporei na parei ws keys h values poly megalous
		 * aplous akeraious (p.x 4294967370) 5) */
	}

	puts("\n\n");

	snapshot(db->volume_desc);

	int skey[2];
	skey[0] = sizeof(int);
	skey[1] = 1034;
	int deleted = 0;
	int ndel = 0;

	//find random keys

	while (skey[1] > 0) {
		skey[1] = (rand() % 2048);
		fprintf(stderr, "random key %d: ", skey[1]);
		
		if (deleteKey(db, skey) == 10) {
			fprintf(stderr, "VALUE DELETED\n");
			deleted++;
		} else {
			fprintf(stderr, "VALUE NOT FOUND\n");
			ndel++;
		}
	}
	
	puts("\n\n");

	fprintf(stderr, "DELETED: %d\nNOT DELETED: %d\n", deleted, ndel);
	fprintf(stderr, "Out of a total of %d deletion attempts.\n", deleted+ndel);
	
	/*fprintf(stderr, "%sPASS = %llu%s\n", TEXT_GREEN, pass, TEXT_NORMAL);
	fprintf(stderr, "%sFAIL = %llu%s\n", TEXT_RED, fail, TEXT_NORMAL); */
	
	puts("Tests done.");