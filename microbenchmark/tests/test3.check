#include "testhdr.h"

#test simtest_3
	fputs("Simple test 3: Insertion of random keys with random values, incl. signed ones.\n", stderr);

	int key[2];
	key[0] = sizeof(int);
	key[1] = 10000;
	const int32_t key_len = sizeof(int);
	int val[2];
	val[0] = sizeof(int);
	val[1] = 10000;
	const int32_t val_len = sizeof(int);
	int a[2], b[2];
	a[0] = sizeof(int);
	b[0] = sizeof(int);

	prepareVolume();
	
	db_handle *db = newDb(DBNAME, PATHNAME, SIZE);
	
	puts("\n\n");

	srand(time(NULL));

	while (key[1] > 1024) {
		key[1] = (rand() % 2048) + 1024;
		val[1] = (rand() % 2048) - 1024;

		a[1] = key[1];
		b[1] = val[1];
		
		if ((key[1] > 1024)) {
			insertKeyValue(db, a, b, 0);
			fprintf(stderr, "insert %d w/ key %d\n", b[1], a[1]);
			fail_unless(findKey(db, a) != NULL, "Search function bugged.");
			fail_unless(deleteKey(db, a) == 10, "Delete function bugged.");
		}

		/* Parathrhseis:
		 * Den mporei na balei kapou opou yparxei hdh kapoio key (doubtful). 1) 
		 * Fainetai oti den mporei na balei proshmasmena keys/values (crash) 2) 
		 * Oi findKey kai deleteKey crasharoun an paroun NULL key 3) 
		 * H insertKeyValue crasharei epishs an parei NULL key/value 4) */
	}

	// snapshot
	snapshot(db->volume_desc);
	
	puts("\n\n");
	
	/*fprintf(stderr, "%sPASS = %llu%s\n", TEXT_GREEN, pass, TEXT_NORMAL);
	fprintf(stderr, "%sFAIL = %llu%s\n", TEXT_RED, fail, TEXT_NORMAL); */
	
	puts("Tests done.");