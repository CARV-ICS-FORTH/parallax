#include "testhdr.h"

#test mttest_7
	  /* PROBLHMATIKO
	     Par' olo pou sbhnontai merikes times, meta apo autes h delete epistrefei != 10 (cannot delete)
             kai kollaei. Ayto den symbainei omws otan p.x exoume 100 keys-values. Edw symbainei gia 102400. 
	     Epishs, gia mikro ari8mo insertions, h delete 8a epistrepsei != 10, parola auta h timh gia thn
             opoia epestrepse != 10 8a exei diagrafei apo thn database. */

	  const int CUT = 2;
	  
	  fputs("Multi-thread test 7: Insertions and deletes in two seperate databases w/ confirmation.\n", stderr);
	  
	  prepareVolume();
	  
	  db_handle *db1 = newDb("dat0.dat", PATHNAME, (SIZE/CUT));
	  db_handle *db2 = newDb("dat1.dat", PATHNAME, (SIZE/CUT));
	  
	  pthread_t t1, t2;
	  struct dbcont cont1, cont2;
	  
	  srand(time(NULL));
	  
	  int i;
	  
	  fputs("Generating keys and values...\n", stderr);
	  
	  for (i = 0; i < INS_NUM; i++) {
		cont1.key[i][0] = sizeof(int);
		cont1.key[i][1] = (rand() % 4294967296);
		
		cont1.value[i][0] = sizeof(int);
		cont1.value[i][1] = (rand() % 4294967296);
		
		cont2.key[i][0] = sizeof(int);
		cont2.key[i][1] = (rand() % 4294967296);
		
		cont2.value[i][0] = sizeof(int);
		cont2.value[i][1] = (rand() % 4294967296);
	  }
	  
	  cont1.db = db1;
	  cont2.db = db2;
	  
	  cont2.no = 2;
	  cont1.no = 1;
	  
	  fputs("Inserting keys and values...\n", stderr);
	  
	  fail_unless(pthread_create(&t1, NULL, insertKeysValues, &cont1) == 0, "Thread 1 Error");
	  fail_unless(pthread_create(&t2, NULL, insertKeysValues, &cont2) == 0, "Thread 2 Error");
	  
	  fail_unless(pthread_join(t1, NULL) == 0, "Cannot join thread 1");
	  fail_unless(pthread_join(t2, NULL) == 0, "Cannot join thread 2");
	  
	  fputs("Confirming insertions...\n", stderr);
	  
	  fail_unless(pthread_create(&t1, NULL, findKeys, &cont1) == 0, "Thread 1 Error");
	  fail_unless(pthread_create(&t2, NULL, findKeys, &cont2) == 0, "Thread 2 Error");
	  
	  fail_unless(pthread_join(t1, NULL) == 0, "Cannot join thread 1");
	  fail_unless(pthread_join(t2, NULL) == 0, "Cannot join thread 2");
	  
	  fputs("Deleting keys and values...\n", stderr);
	  
	  fail_unless(pthread_create(&t1, NULL, deleteKeys, &cont1) == 0, "Thread 1 Error");
	  fail_unless(pthread_create(&t2, NULL, deleteKeys, &cont2) == 0, "Thread 2 Error");
	  
	  fail_unless(pthread_join(t1, NULL) == 0, "Cannot join thread 1");
	  fail_unless(pthread_join(t2, NULL) == 0, "Cannot join thread 2");
	  
	  fputs("Confirming deletes...\n", stderr);
	  
	  fail_unless(pthread_create(&t1, NULL, findKeys, &cont1) == 0, "Thread 1 Error");
	  fail_unless(pthread_create(&t2, NULL, findKeys, &cont2) == 0, "Thread 2 Error");
	  
	  fail_unless(pthread_join(t1, NULL) == 0, "Cannot join thread 1");
	  fail_unless(pthread_join(t2, NULL) == 0, "Cannot join thread 2");
	  
	  fputs("Multi-thread test 7 done.\n", stderr);
